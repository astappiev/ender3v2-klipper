# Cura
# START_PRINT BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0} FILAMENT_TYPE={material_type}
# Super Slicer
# START_PRINT BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP={first_layer_temperature[initial_extruder]+extruder_temperature_offset[initial_extruder]} FILAMENT_TYPE=[filament_type]
# Prusa
# START_PRINT BED_TEMP={first_layer_bed_temperature[0]} EXTRUDER_TEMP={first_layer_temperature[0]} FILAMENT_TYPE=[filament_type]
# Orca
# START_PRINT BED_TEMP=[bed_temperature_initial_layer_single] EXTRUDER_TEMP=[nozzle_temperature_initial_layer]
[gcode_macro START_PRINT]
description: Replace the slicer's custom start g-code scripts
gcode:
    RESPOND MSG="Preparing to print"
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("PLA") %}

    M220 S100 ; reset feedrate
    SET_FILAMENT_PROFILE TYPE={FILAMENT_TYPE}

    RESPOND MSG="Warming up for bed leveling"
    M140 S{BED_TEMP} ; Start bed heating
    M104 S120 ; set extruder temp for bed leveling
    # Wait for bed to reach temperature
    M190 S{BED_TEMP} ; wait for bed temp
    M109 S120 ; wait for extruder temp

    G28 ; home all axes
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE PROFILE=adaptive ADAPTIVE=1 

    RESPOND MSG="Heating to print temp"
    M109 S{EXTRUDER_TEMP} ; set & wait for extruder print temp
    LINE_PURGE
    RESPOND MSG="Print Started"

[gcode_macro END_PRINT]
description: Replace the slicer's custom end g-code scripts
gcode:
    RESPOND MSG="Print Finished"
    PRESENT_PRINT

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
    RESPOND MSG="Paused"

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}
    RESPOND MSG="Resumed"

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    RESPOND MSG="Aborted!"
    PRESENT_PRINT
    CLEAR_PAUSE
    CANCEL_PRINT_BASE

[gcode_macro PRESENT_PRINT]
description: Presents the print by moving it to the front and removing toolhead
gcode:
    # Move nozzle away from print while retracting
    G91 ; relative positioning
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000

    # Move bed forward
    G90 ; absolute positioning
    G1 X0 Y235 F3000

    M84 ; Disable steppers
    TURN_OFF_HEATERS
    M107 ; Disable fans

[gcode_macro LINE_PURGE]
description: Purge nozzles and print a line
gcode:
    G92 E0 ;Reset Extruder
    G0 X2.3 Y180 F3000 ; move outside print area
    G1 Z0.2 F1000 ;Move to start position
    G1 Y95 E9 F1000 ;Draw the first line
    G1 Y85 F3000 ;Move to side a little
    G1 Y0 E21 F1500.0 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z2.0 F1000 ;Move Z Axis up

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unloading_filament
    M125 ; park
    M117 Unloading Filament
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CHANGE_FILAMENT]
gcode:
    # Save the G-code state
    SAVE_GCODE_STATE NAME=change_filament

    # Move the extruder to the side
    G1 X5 Y225 F4000

    # Unload the filament
    G91
    G1 E-10 F100
    G92 E0
    G90

    # Wait for user interaction to confirm new roll of filament
    M117 Please insert new filament and confirm
    
    # Prime the nozzle with new filament
    G91
    G1 E10 F100
    G92 E0
    G1 E5 F200
    G90

    # Restore the G-code state
    RESTORE_GCODE_STATE NAME=change_filament

#=====================================================
# BUILD THE BED MESH
#=====================================================
# G29 that does (1) home all (2) get bed mesh (3) move 
# nozzle to corner so it doesnt ooze on the bed while heating up.
# Change save to "save=yourprinter_mesh" cant use default

[gcode_macro G29]
description: Marlin's "Bed Leveling"
gcode:
    G28
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE PROFILE=default
    G0 X0 Y0 Z10 F6000

#=====================================================
# PARK PRINTER
#=====================================================

[gcode_macro M125]
gcode:
    SAVE_GCODE_STATE NAME=parking
    M117 Parking toolhead
    G91
    G1 Z10 F600 ; move up 5 mm
    G90
    G1 X5 Y225 F4000 ; move to park position
    RESTORE_GCODE_STATE NAME=parking

[gcode_macro M486]
description: Marlin's "Cancel Objects"
gcode:
    # Parameters known to M486 are as follows:
    #   [C<flag>] Cancel the current object
    #   [P<index>] Cancel the object with the given index
    #   [S<index>] Set the index of the current object.
    #       If the object with the given index has been canceled, this will cause
    #       the firmware to skip to the next object. The value -1 is used to
    #       indicate something that isn’t an object and shouldn’t be skipped.
    #   [T<count>] Reset the state and set the number of objects
    #   [U<index>] Un-cancel the object with the given index. This command will be
    #       ignored if the object has already been skipped

    {% if 'exclude_object' not in printer %}
      {action_raise_error("[exclude_object] is not enabled")}
    {% endif %}

    {% if 'T' in params %}
      EXCLUDE_OBJECT RESET=1

      {% for i in range(params.T | int) %}
        EXCLUDE_OBJECT_DEFINE NAME={i}
      {% endfor %}
    {% endif %}

    {% if 'C' in params %}
      EXCLUDE_OBJECT CURRENT=1
    {% endif %}

    {% if 'P' in params %}
      EXCLUDE_OBJECT NAME={params.P}
    {% endif %}

    {% if 'S' in params %}
      {% if params.S == '-1' %}
        {% if printer.exclude_object.current_object %}
          EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
        {% endif %}
      {% else %}
        EXCLUDE_OBJECT_START NAME={params.S}
      {% endif %}
    {% endif %}

    {% if 'U' in params %}
      EXCLUDE_OBJECT RESET=1 NAME={params.U}
    {% endif %}

# filament change 
[gcode_macro M600]
gcode:
    PAUSE
    RESPOND MSG="Filament change!"
    
# load filament. Slow feed filament into the gear, fast load to cold zone then slow load to nozzle.
[gcode_macro M701]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    RESPOND MSG="Loading Fil."
    M83
    G92 E0.0
    MIN_TEMP_CHECK
    G1 E{params.FEED_LENGTH|default(10)|int} F200    ; slow feed filament
    G1 E{params.FAST_LOAD_LENGTH|default(50)|int} F2000    ; Fast load to cold zone
    G1 E{params.SLOW_LOAD_LENGTH|default(50)|int} F100     ; Slow load to nozzle
    G92 E0.0
    RESPOND MSG="Ready"
    RESTORE_GCODE_STATE NAME=loading_filament

# Unload filament. Extrude a small amount, quick pull then slow pull
[gcode_macro M702]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    RESPOND MSG="Unloading Fil."
    MIN_TEMP_CHECK
    G91 ; set relative
    G1 E{params.FEED_LENGTH|default(10)|int} F100 
    G92 E0.0
    G1 E-{params.FAST_UNLOAD_LENGTH|default(70)|int} F2000  ; fast unload
    G92 E0.0
    G1 E-{params.SLOW_UNLOAD_LENGTH|default(40)|int} F1000  ; slow unload
    G92 E0.0
    RESPOND MSG="Ready"
    RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro M900]
gcode:
    SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)|float}

[gcode_macro MIN_TEMP_CHECK]
gcode: 
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            M109 S{printer.extruder.target|float}
        {% endif %}
    {% else %} # if no setpoint for extruder
        M109 S{params.T|default(200)|float}
    {% endif %}

[gcode_macro UPDATE_BED_MESH]
description: Calibrates bed mesh
gcode:
    M104 S120 # set extruder temp
    M190 S60  # set bed temp & wait
    M109 S120 # set extruder temp & wait
    # Home all axis
    RESPOND MSG="Homing..."
    G28
    RESPOND MSG="Probing..."
    BED_MESH_CLEAR
    # Start probing
    BED_MESH_CALIBRATE
    # Turn off heaters afterward
    TURN_OFF_HEATERS
    # Save config
    RESPOND MSG="Saving..."
    AUTO_SAVE_CONFIG

[gcode_macro AUTO_SAVE_CONFIG]
gcode:
    {% if printer.configfile.save_config_pending %}
        RESPOND MSG="Saving config"
        SAVE_CONFIG
    {% endif %}

[gcode_macro SET_FILAMENT_PROFILE]
gcode:
    {% set type = params.TYPE|default("PLA") %}
    {% if type == "PLA" %}
      RESPOND MSG="Set filament profile : PLA" OUTPUT_TARGET=1
      M221 S91 ; Tunned flow
      SET_PRESSURE_ADVANCE ADVANCE=0.05
    {% elif type == "PETG" %}
      RESPOND MSG="Set filament profile : PETG" OUTPUT_TARGET=1
      M221 S91 ; Tunned flow
      SET_PRESSURE_ADVANCE ADVANCE=0.08
    {% elif type == "ABS" %}
      RESPOND MSG="Set filament profile : ABS" OUTPUT_TARGET=1
      M221 S91 ; Tunned flow
      SET_PRESSURE_ADVANCE ADVANCE=0.04
    {% elif type == "PC" %}
      RESPOND MSG="Set filament profile : PC" OUTPUT_TARGET=1
      M221 S91 ; Tunned flow
      SET_PRESSURE_ADVANCE ADVANCE=0.07
    {% elif type == "CFPC" %}
      RESPOND MSG="Set filament profile : CFPC" OUTPUT_TARGET=1
      M221 S91 ; Tunned flow
      SET_PRESSURE_ADVANCE ADVANCE=0.05
    {% else %}
      RESPOND MSG="Set filament profile : Defalut" OUTPUT_TARGET=1
      M221 S91 ; Tunned flow
      SET_PRESSURE_ADVANCE ADVANCE=0.00
    {% endif %}

## Development helpers

[gcode_macro DUMP_VARS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
        {% if (name1 != "configfile") and (name1 != "bed_mesh" and name2!="mesh_matrix") and (name1 != "mcu" and name2!="mcu_constants") and (name1 != "mcu" and name2!="last_stats") and (name2 != "color_data") and (andm1 != "gcode_macro") %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
        {% else %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, "...")) }
        {% endif %}
      {% endfor %}
   {% endfor %}

[gcode_macro DEBUG]
gcode:
    {% set tmp = "this is test" %}
    RESPOND MSG="{tmp.split(',')|length}"
